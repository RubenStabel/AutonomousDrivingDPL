#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "perc_net_AD_V1", "module": "AD_V1_net(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=120, bias=True)\n  (fc2): Linear(in_features=120, out_features=84, bias=True)\n  (fc3): Linear(in_features=84, out_features=3, bias=True)\n  (softmax): Softmax(dim=-1)\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.001\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "coord(X) :- X=0.\ncoord(X) :- X=1.\ncoord(X) :- X=2.\nadmissible_cells(X,Y) :- coord(X), coord(Y).\nnn(perc_net_AD_V1,[Img, X, Y],Z,[human, nothing])::cell(Img,X,Y,Z).\nattention_boundary(X,Y) :- X==0.\nattention_boundary(X,Y) :- X==1.\nenlarged_boundary(X,Y) :- X==2.\naction(Img,1) :- admissible_cells(X,Y), attention_boundary(X,Y), cell(Img,X,Y,human).\naction(Img,2) :- admissible_cells(X,Y), enlarged_boundary(X,Y), cell(Img,X,Y,human), \\+action(Img,1).\naction(Img,0) :- \\+action(Img,2), \\+action(Img,1).\n"}
#Accuracy 0.2
i,